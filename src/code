/******************************************************************************
 * Proyecto: Robot Autónomo WRO 2025 - SEGUIDOR DE PAREDES
 * Plataforma: Arduino Mega
 * Descripción: Programa de control para navegación usando sensores
 * ultrasónicos para la dirección.
 ******************************************************************************/

// --- Inclusión de Librerías Esenciales ---
#include <Servo.h>      // Librería para el control del servomotor.
// La librería de PID y Pixy no son necesarias para esta estrategia básica.

// --- Definiciones de Pines y Constantes ---
#define ENA_PIN 2
#define IN1_PIN 3
#define IN2_PIN 4
#define SERVO_PIN 45
#define TRIG_FRONT 50
#define ECHO_FRONT 51
#define TRIG_LEFT  52
#define ECHO_LEFT  53
#define TRIG_RIGHT 48
#define ECHO_RIGHT 49

// --- Parámetros de Calibración ---
#define SERVO_CENTRO 90
#define SERVO_MAX_DER 120   // Reducimos un poco para giros más suaves
#define SERVO_MAX_IZQ 60

// --- Parámetros para el Seguidor de Paredes ---
const int distanciaObjetivo = 20; // cm. Distancia que queremos mantener con la pared.
const float Kp_direccion = 2.5;   // Ganancia proporcional. ¡VALOR CRÍTICO A SINTONIZAR!

// --- Objetos Globales ---
Servo servoDireccion;

void setup() {
  Serial.begin(9600);

  // Servo de Dirección
  servoDireccion.attach(SERVO_PIN);
  servoDireccion.write(SERVO_CENTRO);

  // Motores de Tracción
  pinMode(ENA_PIN, OUTPUT);
  pinMode(IN1_PIN, OUTPUT);
  pinMode(IN2_PIN, OUTPUT);
  digitalWrite(IN1_PIN, LOW);
  digitalWrite(IN2_PIN, LOW);

  // Sensores Ultrasónicos
  pinMode(TRIG_FRONT, OUTPUT);
  pinMode(ECHO_FRONT, INPUT);
  pinMode(TRIG_LEFT, OUTPUT);
  pinMode(ECHO_LEFT, INPUT);
  pinMode(TRIG_RIGHT, OUTPUT);
  pinMode(ECHO_RIGHT, INPUT);

  // Dar tiempo a los sensores para estabilizarse
  delay(1000); 
}

void loop() {
  // Leemos la distancia del sensor frontal para seguridad y giros en esquinas
  int distFrontal = medirDistancia(TRIG_FRONT, ECHO_FRONT);

  // Lógica de Giro en Esquinas
  if (distFrontal < 25 && distFrontal > 0) {
    // Si la pared de enfrente está muy cerca, es una esquina.
    // Hacemos un giro brusco a la izquierda (asumiendo que seguimos la pared derecha).
    analogWrite(ENA_PIN, 130); // Reducir velocidad para el giro
    servoDireccion.write(SERVO_MAX_IZQ);
    delay(500); // Duración del giro, ajustar según sea necesario
    return; // Salir del loop para completar el giro
  }
  
  // Si no hay esquina, ejecutamos la lógica de seguimiento de pared
  controlarDireccionConUltrasonicos();

  // Velocidad de avance constante
  analogWrite(ENA_PIN, 180); 
}

// --- Funciones de Control y Medición ---

/**
 * @brief Ajusta la dirección para mantener una distancia constante con la pared derecha.
 */
void controlarDireccionConUltrasonicos() {
  // Medir la distancia a la pared derecha
  int distanciaActual = medirDistancia(TRIG_RIGHT, ECHO_RIGHT);

  // Si la distancia es muy grande (no hay pared), podemos ir recto.
  if (distanciaActual > 80) { // Umbral de "no hay pared"
      servoDireccion.write(SERVO_CENTRO);
      return;
  }
  
  // Calcular el error: la diferencia entre dónde estamos y dónde queremos estar.
  int error = distanciaActual - distanciaObjetivo;

  // Calcular el ajuste del servo usando control proporcional.
  // Si el error es positivo, estamos muy lejos -> girar a la derecha.
  // Si el error es negativo, estamos muy cerca -> girar a la izquierda.
  int ajuste = error * Kp_direccion;
  int anguloServo = SERVO_CENTRO - ajuste;

  // Limitar el ángulo para no forzar la mecánica.
  anguloServo = constrain(anguloServo, SERVO_MAX_IZQ, SERVO_MAX_DER);

  // Enviar el comando al servo.
  servoDireccion.write(anguloServo);

  // Depuración (opcional)
  Serial.print("Distancia: ");
  Serial.print(distanciaActual);
  Serial.print(" | Error: ");
  Serial.print(error);
  Serial.print(" | Angulo: ");
  Serial.println(anguloServo);
}

/**
 * @brief Mide la distancia en cm usando un sensor ultrasónico.
 */
int medirDistancia(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duracion = pulseIn(echoPin, HIGH, 30000);
  return duracion * 0.034 / 2;
}
